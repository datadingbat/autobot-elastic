---
# Input validation tasks
- name: Set default variables
  set_fact:
    installation_method: "{{ hostvars['localhost']['selected_play_vars']['installation_method'] | default('apt') }}"
    start_service: "{{ hostvars['localhost']['selected_play_vars']['start_service'] | default(true) }}"
    es_cert_pass: "elastic2024"
    first_master: "{{ groups['master_nodes'][0] }}"
    cert_files:
      - elastic-http.p12
      - elastic-certificates.p12
      - elastic-http-ca.pem
      - elastic-http-ca.crt
      - elastic-http.key
      - elastic-http.pem
    deb_package_path: "{{ hostvars['localhost']['selected_play_vars']['deb_package_path'] | default('') }}"

- name: Validate local installation requirements
  assert:
    that:
      - deb_package_path != ''
    fail_msg: "deb_package_path must be set for local installation method"
  when: installation_method == 'local'
  run_once: true
  delegate_to: localhost

# Determine target node role
- name: Determine target node role and get existing paths
  block:
    - name: Initialize target role
      set_fact:
        target_role: >-
          {%- if inventory_hostname in groups['master_nodes'] -%}
          master
          {%- elif inventory_hostname in groups['hot_nodes'] -%}
          hot
          {%- elif inventory_hostname in groups['frozen_nodes'] -%}
          frozen
          {%- else -%}
          unknown
          {%- endif -%}

    - name: Find existing nodes of same role
      set_fact:
        existing_nodes: >-
          {%- if target_role == 'master' -%}
          {{ groups['master_nodes'] }}
          {%- elif target_role == 'hot' -%}
          {{ groups['hot_nodes'] }}
          {%- elif target_role == 'frozen' -%}
          {{ groups['frozen_nodes'] }}
          {%- else -%}
          []
          {%- endif -%}

    - name: Get first existing node configuration
      block:
        - name: Read elasticsearch.yml from existing node
          slurp:
            src: /etc/elasticsearch/elasticsearch.yml
          register: es_config_file
          delegate_to: "{{ (existing_nodes | difference([inventory_hostname]) | first) }}"
          when: (existing_nodes | difference([inventory_hostname]) | length) > 0
          ignore_errors: yes

        - name: Parse paths from config
          set_fact:
            existing_paths:
              data: "{{ (es_config_file.content | b64decode | regex_findall('path.data: (.+)') | first) if es_config_file is defined and es_config_file.content is defined else '/var/lib/elasticsearch' }}"
              logs: "{{ (es_config_file.content | b64decode | regex_findall('path.logs: (.+)') | first) if es_config_file is defined and es_config_file.content is defined else '/var/log/elasticsearch' }}"
          when: es_config_file is defined and es_config_file.content is defined

        - name: Set default paths if no existing config
          set_fact:
            existing_paths:
              data: "/var/lib/elasticsearch"
              logs: "/var/log/elasticsearch"
          when: es_config_file is not defined or es_config_file.content is not defined

    # Prompt for paths if not provided by toolkit
    - name: Handle path configuration
      block:
        - name: Prompt for data path
          pause:
            prompt: |
              Current {{ target_role }} nodes use data path: {{ existing_paths.data }}
              Enter the path for Elasticsearch data storage
              Press enter to use suggested path, or specify custom path:
          register: data_path_input
          when: es_data_path is not defined

        - name: Prompt for log path
          pause:
            prompt: |
              Current {{ target_role }} nodes use log path: {{ existing_paths.logs }}
              Enter the path for Elasticsearch logs
              Press enter to use suggested path, or specify custom path:
          register: log_path_input
          when: es_log_path is not defined

        - name: Set final paths
          set_fact:
            final_paths:
              data: "{{ es_data_path | default(data_path_input.user_input) | default(existing_paths.data) }}"
              logs: "{{ es_log_path | default(log_path_input.user_input) | default(existing_paths.logs) }}"

  delegate_to: localhost
  run_once: true

- name: Set default variables
  set_fact:
    installation_method: "apt"
    start_service: true
    es_cert_pass: "elastic2024"
    first_master: "{{ groups['master_nodes'][0] }}"
    cert_files:
      - elastic-http.p12
      - elastic-certificates.p12
      - elastic-http-ca.pem
      - elastic-http-ca.crt
      - elastic-http.key
      - elastic-http.pem
  no_log: true

- name: Validate master nodes exist
  fail:
    msg: "No master nodes found in inventory. At least one master node is required."
  when: groups['master_nodes'] is not defined or groups['master_nodes'] | length == 0
  run_once: true

# Pre-flight certificate checks
- name: Check certificates
  block:
    - name: Check controller certificates
      stat:
        path: "/tmp/es_certs/{{ item }}"
      register: controller_cert_check
      with_items: "{{ cert_files }}"
      delegate_to: localhost
      run_once: true
      no_log: true

    - name: Setup certificates if needed
      block:
        - name: Create temp cert directory
          file:
            path: /tmp/es_certs
            state: directory
            mode: '0755'
            owner: "{{ ansible_user }}"
          delegate_to: localhost
          run_once: true
          become: yes
          no_log: true

        - name: Fetch certificates from master
          fetch:
            src: "/etc/elasticsearch/certs/{{ item }}"
            dest: "/tmp/es_certs/{{ item }}"
            flat: yes
            mode: '0644'
          with_items: "{{ cert_files }}"
          delegate_to: "{{ first_master }}"
          run_once: true
          become: yes
          no_log: true
      when: controller_cert_check.results | selectattr('stat.exists', 'equalto', false) | list | length > 0

    - name: Verify fetched certificates
      stat:
        path: "/tmp/es_certs/{{ item }}"
      register: cert_check
      with_items: "{{ cert_files }}"
      delegate_to: localhost
      run_once: true
      no_log: true

- name: Validate certificates exist
  fail:
    msg: "Required certificates not found. Please ensure certificates are generated first."
  when: cert_check.results | selectattr('stat.exists', 'equalto', false) | list | length > 0
  run_once: true
  delegate_to: localhost

# Pre-flight status check
- name: Pre-flight checks
  block:
    - name: Check installation status
      block:
        - name: Check if package is installed
          shell: "dpkg -l elasticsearch | grep -q '^ii'"
          register: pkg_check
          changed_when: false
          failed_when: false
          become: yes
          no_log: true

        - name: Check if service is active
          shell: "systemctl is-active elasticsearch || true"
          register: service_check
          changed_when: false
          failed_when: false
          become: yes
          no_log: true

        - name: Check if config directory exists
          stat:
            path: /etc/elasticsearch
          register: config_check
          become: yes
          no_log: true

        - name: Set installation status
          set_fact:
            es_installed: "{{ pkg_check.rc == 0 or service_check.stdout == 'active' or config_check.stat.exists }}"
            host_status:
              installed: "{{ pkg_check.rc == 0 or service_check.stdout == 'active' or config_check.stat.exists }}"
              pkg_status: "{{ pkg_check.rc == 0 }}"
              service_status: "{{ service_check.stdout }}"
              config_exists: "{{ config_check.stat.exists }}"
          no_log: true

    - name: Create installation status report
      copy:
        content: |
          Pre-Installation Status Report
          =============================
          Installation Details:
          -------------------
          Component: Elasticsearch
          Node Role: {{ target_role }}
          Installation Method: {{ hostvars['localhost']['selected_play_vars']['installation_method'] }}
          {% if hostvars['localhost']['selected_play_vars']['installation_method'] == 'apt' %}
          Version: {% if hostvars['localhost']['selected_play_vars']['component_version'] is defined %}{% if hostvars['localhost']['selected_play_vars']['component_version'] == 'latest' %}Latest available{% else %}{{ hostvars['localhost']['selected_play_vars']['component_version'] }}{% endif %}{% else %}Not specified{% endif %}
          {% else %}
          Package Path: {{ hostvars['localhost']['selected_play_vars']['deb_package_path'] }}
          {% endif %}

          Path Configuration:
          -----------------
          Data Path: {{ final_paths.data }}
          {% if existing_paths.data != final_paths.data %}(Different from existing {{ target_role }} nodes: {{ existing_paths.data }}){% endif %}
          
          Log Path: {{ final_paths.logs }}
          {% if existing_paths.logs != final_paths.logs %}(Different from existing {{ target_role }} nodes: {{ existing_paths.logs }}){% endif %}

          Target Hosts:
          -------------
          Total Target Hosts: {{ ansible_play_hosts | length }}

          Hosts with Existing Installation (Will Skip):
          {% for host in ansible_play_hosts %}
          {% if hostvars[host].host_status.installed %}
          - {{ host }}
            Package: {% if hostvars[host].host_status.pkg_status %}Installed{% else %}Not installed{% endif %}
            Service: {{ hostvars[host].host_status.service_status }}
            Config Directory: {% if hostvars[host].host_status.config_exists %}Exists{% else %}Not found{% endif %}

          {% endif %}
          {% endfor %}

          Hosts Ready for Installation:
          {% for host in ansible_play_hosts %}
          {% if not hostvars[host].host_status.installed %}
          - {{ host }}
          {% endif %}
          {% endfor %}
        dest: "/tmp/es_preinstall_report.txt"
      run_once: true
      delegate_to: localhost

    - name: Display pre-installation status
      debug:
        msg: "{{ lookup('file', '/tmp/es_preinstall_report.txt') | split('\n') }}"
      run_once: true
      delegate_to: localhost

    - name: Prompt for installation confirmation
      pause:
        prompt: |
          The above report shows the current status of target hosts.
          Do you want to proceed with installation on eligible hosts? (yes/no):
      register: install_confirmation
      run_once: true
      delegate_to: localhost

    - name: Exit if not confirmed
      meta: end_play
      when: install_confirmation.user_input | lower != 'yes'
      run_once: true
      delegate_to: localhost

# APT Repository Setup
- name: Install APT prerequisites
  when: not es_installed and hostvars['localhost']['selected_play_vars']['installation_method'] == 'apt'
  block:
    - name: Ensure apt-transport-https is installed
      apt:
        name: apt-transport-https
        state: present
        update_cache: yes
      no_log: true

    - name: Install necessary packages
      apt:
        name:
          - gnupg
          - curl
          - wget
          - python3
        state: present
      no_log: true

    - name: Create keyring directory
      file:
        path: /usr/share/keyrings
        state: directory
      no_log: true

    - name: Download Elasticsearch GPG key
      get_url:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        dest: "{{ ansible_env.HOME }}/elasticsearch.asc"
        mode: '0644'
      no_log: true

    - name: Import the Elasticsearch GPG key
      shell: |
        cat "{{ ansible_env.HOME }}/elasticsearch.asc | gpg --dearmor > /usr/share/keyrings/elasticsearch-keyring.gpg"
      args:
        creates: /usr/share/keyrings/elasticsearch-keyring.gpg
      no_log: true

    - name: Add Elasticsearch repository
      copy:
        dest: /etc/apt/sources.list.d/elastic-8.x.list
        content: "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg arch=amd64] https://artifacts.elastic.co/packages/8.x/apt stable main"
        mode: '0644'
      no_log: true

    - name: Force apt update
      apt:
        update_cache: yes
        cache_valid_time: 0
      no_log: true
  become: yes

# Installation
- name: Install Elasticsearch
  when: not es_installed
  block:
    - name: Handle local package installation
      block:
        - name: Check package exists on controller
          stat:
            path: "{{ deb_package_path }}"
          register: controller_package_check
          delegate_to: localhost

        - name: Fail if package not found on controller
          fail:
            msg: "Package file not found at {{ deb_package_path }} on Ansible controller. Please ensure the .deb package exists and the path is correct."
          when: not controller_package_check.stat.exists
          delegate_to: localhost

        - name: Copy package to target
          copy:
            src: "{{ deb_package_path }}"
            dest: "/tmp/{{ deb_package_path | basename }}"
            mode: '0644'

        - name: Install from local package
          apt:
            deb: "/tmp/{{ deb_package_path | basename }}"
            state: present
            allow_unauthenticated: no
      when: installation_method == 'local'
      no_log: true

    - name: Install via APT
      apt:
        name: "elasticsearch{% if hostvars['localhost']['selected_play_vars']['component_version'] != 'latest' %}={{ hostvars['localhost']['selected_play_vars']['component_version'] }}{% endif %}"
        state: "{{ 'latest' if hostvars['localhost']['selected_play_vars']['component_version'] == 'latest' else 'present' }}"
        allow_unauthenticated: no
      environment:
        DEBIAN_FRONTEND: noninteractive
      when: installation_method == 'apt'
      no_log: true
  become: yes

- name: Set Elasticsearch directory permissions
  file:
    path: "{{ item }}"
    owner: elasticsearch
    group: elasticsearch
    mode: '0660'
    state: directory
    recurse: yes    
  loop:
    - "/etc/elasticsearch"
    - "/var/lib/elasticsearch"
    - "/var/log/elasticsearch"
  register: dir_perms
  failed_when: false  # Don't fail if elasticsearch user doesn't exist yet
  become: yes

- name: Short pause after perms
  wait_for:
    timeout: 10
  delegate_to: localhost
  run_once: true

# System Configuration
- name: Configure system settings
  when: not es_installed
  block:
    - name: Create systemd override directory
      file:
        path: /etc/systemd/system/elasticsearch.service.d
        state: directory
      no_log: true

    - name: Configure systemd override
      copy:
        dest: /etc/systemd/system/elasticsearch.service.d/override.conf
        content: |
          [Service]
          LimitMEMLOCK=infinity
      no_log: true

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes
      no_log: true

    - name: Setup certificates
      block:
        - name: Create certs directory
          file:
            path: /etc/elasticsearch/certs
            state: directory
            owner: root
            group: elasticsearch
            mode: '0750'
          no_log: true

        - name: Copy certificates
          copy:
            src: "/tmp/es_certs/{{ item }}"
            dest: "/etc/elasticsearch/certs/{{ item }}"
            mode: '0660'
            owner: root
            group: elasticsearch
          with_items: "{{ cert_files }}"
          no_log: true

        - name: Set certificate permissions
          file:
            path: "/etc/elasticsearch/certs/{{ item }}"
            owner: root
            group: elasticsearch
            mode: '0660'
          with_items: "{{ cert_files }}"
          no_log: true
      no_log: true

    # Move SSL password configuration before elasticsearch.yml and service start
    - name: Update SSL passwords in keystore
      shell: |
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.transport.ssl.keystore.secure_password
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.transport.ssl.truststore.secure_password    
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.http.ssl.keystore.secure_password
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.http.ssl.truststore.secure_password
      no_log: true
      become: yes
      become_user: elasticsearch

    # Verify keystore configuration
    - name: Verify elasticsearch keystore
      command: /usr/share/elasticsearch/bin/elasticsearch-keystore list
      register: keystore_list
      changed_when: false
      no_log: true

    - name: Configure elasticsearch.yml
      copy:
        dest: /etc/elasticsearch/elasticsearch.yml
        content: |
          # Elasticsearch configuration
          path.data: {{ final_paths.data }}
          path.logs: {{ final_paths.logs }}

          bootstrap.memory_lock: true

          cluster.name: elastic-cluster

          node.name: {{ hostvars[inventory_hostname].ansible_host }}
          network.host: {{ hostvars[inventory_hostname].ansible_host }}

          {% if inventory_hostname in groups['master_nodes'] %}
          node.roles: [master]
          {% elif inventory_hostname in groups['hot_nodes'] %}
          node.roles: [data_hot, ingest, remote_cluster_client, ml, data_content, transform]
          {% elif inventory_hostname in groups['frozen_nodes'] %}
          node.roles: [data_frozen, remote_cluster_client]
          {% endif %}

          discovery.seed_hosts:
          {% for host in groups['master_nodes'] %}
            - "{{ hostvars[host].ansible_host }}:9300"
          {% endfor %}
          {% if inventory_hostname in groups['master_nodes'] %}
          cluster.initial_master_nodes:
          {% for host in groups['master_nodes'] %}
            - "{{ hostvars[host].ansible_host }}"
          {% endfor %}
          {% endif %}

          xpack.security.enabled: true
          xpack.security.enrollment.enabled: true

          xpack.security.http.ssl:
            enabled: true
            keystore.path: /etc/elasticsearch/certs/elastic-http.p12
            truststore.path: /etc/elasticsearch/certs/elastic-http.p12
            verification_mode: certificate 
            client_authentication: optional

          xpack.security.transport.ssl:
            enabled: true
            verification_mode: certificate
            keystore.path: /etc/elasticsearch/certs/elastic-certificates.p12
            truststore.path: /etc/elasticsearch/certs/elastic-certificates.p12
            client_authentication: optional
            
          transport.host: 0.0.0.0
          transport.port: 9300
          http.port: 9200
        owner: elasticsearch
        group: elasticsearch
        mode: '0660'
      no_log: true

    # Verify certificate permissions before starting
    - name: Verify certificate permissions
      stat:
        path: "/etc/elasticsearch/certs/{{ item }}"
      register: cert_stat
      with_items: "{{ cert_files }}"
      no_log: true

    - name: Check certificate access
      fail:
        msg: "Certificate {{ item.item }} has incorrect permissions or ownership"
      when: >
        not item.stat.exists or
        item.stat.pw_name != "root" or
        item.stat.gr_name != "elasticsearch" or
        item.stat.mode != "0660"
      with_items: "{{ cert_stat.results }}"
      no_log: true

    - name: Start Elasticsearch
      systemd:
        name: elasticsearch
        state: started
        enabled: yes
      when: start_service | bool
      no_log: true

    # Add a short wait to let the service stabilize
    - name: Wait for service to stabilize
      pause:
        seconds: 10
      when: start_service | bool
      no_log: true

    # Check the service status
    - name: Check Elasticsearch service status
      command: systemctl status elasticsearch
      register: es_status
      changed_when: false
      failed_when: false
      no_log: true

    - name: Display service status if there are issues
      debug:
        msg: "{{ es_status.stdout_lines }}"
      when: "'active (running)' not in es_status.stdout"
  become: yes

  
# Final Report Generation
- name: Generate installation report
  block:
    - name: Get final service status
      shell: "systemctl status elasticsearch || true"
      register: final_status
      changed_when: false
      failed_when: false
      become: yes
      when: not es_installed
      no_log: true

    - name: Collect final status
      set_fact:
        final_status_info: "{{ final_status_info | default({}) | combine({inventory_hostname: {
          'skipped': es_installed,
          'status': final_status if not es_installed else omit
        }}) }}"
      delegate_to: localhost
      no_log: true

    - name: Create installation report
      copy:
        content: |
          Elasticsearch Installation Report
          ===============================
          Installation Summary:
          -------------------
          Total Hosts: {{ ansible_play_hosts | length }}
          Skipped (Existing): {{ final_status_info.values() | selectattr('skipped', 'true') | list | length }}
          Attempted Install: {{ final_status_info.values() | selectattr('skipped', 'false') | list | length }}

          Skipped Hosts (Existing Installation):
          {% for host, info in final_status_info.items() if info.skipped %}
          - {{ host }}
          {% endfor %}

          Installation Results:
          {% for host, info in final_status_info.items() if not info.skipped %}
          Host: {{ host }}
          Status: {% if 'Active: active (running)' in info.status.stdout %}Successfully installed and running
          {% elif 'Active:' in info.status.stdout %}Installed but not running
          {% else %}Installation failed or incomplete{% endif %}
          
          Details:
          {{ info.status.stdout }}
          
          {% endfor %}

          Next Steps:
          -----------
          1. Verify cluster health: curl -k https://[host]:9200/_cluster/health
          2. Set up additional security features if needed
          3. Configure monitoring if required
          4. Review logs at /var/log/elasticsearch/elastic-cluster.log
        dest: "/tmp/es_install_report.txt"
      run_once: true
      delegate_to: localhost

    - name: Display installation report
      debug:
        msg: "{{ lookup('file', '/tmp/es_install_report.txt') | split('\n') }}"
      run_once: true
      delegate_to: localhost

  always:
    - name: Set cleanup files list
      set_fact:
        cleanup_files:
          - "/tmp/es_preinstall_report.txt"
          - "/tmp/es_install_report.txt"
          - "{{ ansible_env.HOME }}/elasticsearch.asc"  
      run_once: true
      delegate_to: localhost
      no_log: true

    - name: Add deb package to cleanup list if local installation
      set_fact:
        cleanup_files: "{{ cleanup_files + ['/tmp/' + hostvars['localhost']['selected_play_vars']['deb_package_path'] | basename] }}"
      when: 
        - hostvars['localhost']['selected_play_vars']['installation_method'] is defined
        - hostvars['localhost']['selected_play_vars']['installation_method'] == 'local'
        - hostvars['localhost']['selected_play_vars']['deb_package_path'] is defined
      run_once: true
      delegate_to: localhost
      no_log: true

    - name: Cleanup temporary files
      file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ cleanup_files }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: yes
      no_log: true