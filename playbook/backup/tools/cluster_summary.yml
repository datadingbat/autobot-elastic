---
# cluster_summary.yml

# First define our variables
- name: Set summary variables
  set_fact:
    deployment_dir: "{{ lookup('env', 'HOME') }}/.elasticsearch"
    services:
      - elasticsearch
      - kibana
      - filebeat
      - metricbeat
    cert_files:
      - elastic-http-ca.pem
      - elastic-http.key
      - elastic-http.pem
      - elastic-certificates.p12
      - elastic-http.p12
      - elastic-http-ca.crt
  delegate_to: localhost
  run_once: true
  
# Ensure we know which hosts we're working with
- name: Debug inventory hosts
  debug:
    msg: "Working with hosts: {{ groups['all'] | join(', ') }}"
  delegate_to: localhost
  run_once: true

# Initialize the summary structure
- name: Initialize summary data
  set_fact:
    cluster_summary:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      topology: {}
      deployment: {}
      services: {}
      security: {}
      resources: {}
      alerts: []
      recommendations: []
  delegate_to: localhost
  run_once: true

# Load deployment info (on localhost)
- name: Load deployment variables
  include_vars:
    file: "{{ deployment_dir }}/deployment_vars.yml"
  ignore_errors: yes
  delegate_to: localhost
  run_once: true

# Deployment info check (on localhost)
- name: Gather deployment information
  block:
    - name: Check deployment artifacts
      stat:
        path: "{{ deployment_dir }}/{{ item }}"
      register: artifact_check
      with_items:
        - deployment_vars.yml
        - elastic_password.txt
        - kibana_password.txt
        - filebeat_output_apikey.txt
        - metricbeat_remote_monitoring_user.txt
        - monitoring_cluster_metricbeat_output_apikey.txt

    - name: Store deployment info
      set_fact:
        cluster_summary: "{{ cluster_summary | combine({
          'deployment': {
            'installation_method': installation_method | default('unknown'),
            'cluster_name': cluster_name | default('unknown'),
            'data_path': es_data_path | default('/var/lib/elasticsearch'),
            'log_path': es_log_path | default('/var/log/elasticsearch'),
            'artifacts': {
              'vars_file': artifact_check.results[0].stat.exists,
              'elastic_password': artifact_check.results[1].stat.exists,
              'kibana_password': artifact_check.results[2].stat.exists,
              'filebeat_key': artifact_check.results[3].stat.exists,
              'metricbeat_user': artifact_check.results[4].stat.exists,
              'monitoring_key': artifact_check.results[5].stat.exists
            }
          }
        }, recursive=True) }}"
  delegate_to: localhost
  run_once: true

# Topology analysis (on localhost)
- name: Analyze cluster topology
  set_fact:
    cluster_summary: "{{ cluster_summary | combine({
      'topology': {
        'master_nodes': groups['master_nodes'] | default([]) | length,
        'hot_nodes': groups['hot_nodes'] | default([]) | length,
        'frozen_nodes': groups['frozen_nodes'] | default([]) | length,
        'kibana': groups['kibana'] | default([]) | length,
        'monitoring_instance': groups['monitoring_instance'] | default([]) | length,
        'helper_instance': groups['helper_instance'] | default([]) | length,
        'total_hosts': groups['all'] | length
      }
    }, recursive=True) }}"
  delegate_to: localhost
  run_once: true

# Certificate check (on localhost)
- name: Check certificate status
  block:
    - name: Check cert directory
      stat:
        path: "{{ deployment_dir }}/certs"
      register: cert_dir_check

    - name: Check individual certificates
      stat:
        path: "{{ deployment_dir }}/certs/{{ item }}"
      register: cert_checks
      with_items: "{{ cert_files }}"
      when: cert_dir_check.stat.exists

    - name: Store certificate status
      set_fact:
        cluster_summary: "{{ cluster_summary | combine({
          'security': {
            'certificates': {
              'directory_exists': cert_dir_check.stat.exists,
              'files_present': cert_checks.results | selectattr('stat.exists', 'defined') | list | length,
              'files_expected': cert_files | length
            }
          }
        }, recursive=True) }}"
  delegate_to: localhost
  run_once: true

# Service state collection (runs on all hosts)
- name: Initialize service states collection
  set_fact:
    service_states: {}
  delegate_to: localhost
  run_once: true

- name: Fetch elasticsearch package status (direct call)
  shell: "dpkg -l '*elastic*' | grep '^ii'"
  register: es_pkgs
  changed_when: false
  failed_when: false
  become: yes

- name: Fetch kibana package status (direct call)
  shell: "dpkg -l 'kibana' | grep '^ii'"
  register: kibana_pkgs
  changed_when: false
  failed_when: false
  become: yes

- name: Fetch filebeat package status (direct call)
  shell: "dpkg -l 'filebeat' | grep '^ii'"
  register: filebeat_pkgs
  changed_when: false
  failed_when: false
  become: yes

- name: Fetch metricbeat package status (direct call)
  shell: "dpkg -l 'metricbeat' | grep '^ii'"
  register: metricbeat_pkgs
  changed_when: false
  failed_when: false
  become: yes

# Check service status for each component
- name: Check elasticsearch service status
  service:
    name: elasticsearch
  register: es_service_status
  changed_when: false
  failed_when: false
  become: yes
  when: es_pkgs.rc == 0

- name: Check kibana service status
  service:
    name: kibana
  register: kibana_service_status
  changed_when: false
  failed_when: false
  become: yes
  when: kibana_pkgs.rc == 0

- name: Check filebeat service status
  service:
    name: filebeat
  register: filebeat_service_status
  changed_when: false
  failed_when: false
  become: yes
  when: filebeat_pkgs.rc == 0

- name: Check metricbeat service status
  service:
    name: metricbeat
  register: metricbeat_service_status
  changed_when: false
  failed_when: false
  become: yes
  when: metricbeat_pkgs.rc == 0

- name: Set package and service checks
  set_fact:
    host_packages:
      elasticsearch: 
        installed: "{{ es_pkgs.rc == 0 }}"
        status: "{{ es_service_status.status | default('not_installed') if es_pkgs.rc == 0 else 'not_installed' }}"
      kibana: 
        installed: "{{ kibana_pkgs.rc == 0 }}"
        status: "{{ kibana_service_status.status | default('not_installed') if kibana_pkgs.rc == 0 else 'not_installed' }}"
      filebeat: 
        installed: "{{ filebeat_pkgs.rc == 0 }}"
        status: "{{ filebeat_service_status.status | default('not_installed') if filebeat_pkgs.rc == 0 else 'not_installed' }}"
      metricbeat: 
        installed: "{{ metricbeat_pkgs.rc == 0 }}"
        status: "{{ metricbeat_service_status.status | default('not_installed') if metricbeat_pkgs.rc == 0 else 'not_installed' }}"

# This is now handled later in the playbook
- name: Do nothing (placeholder)
  debug:
    msg: "Package registry will be built later"

- name: Debug package status for each host
  debug:
    msg: |
      Host: {{ inventory_hostname }}
      Elasticsearch: {{ host_packages.elasticsearch.installed }} ({{ host_packages.elasticsearch.status }})
      Kibana: {{ host_packages.kibana.installed }} ({{ host_packages.kibana.status }})
      Filebeat: {{ host_packages.filebeat.installed }} ({{ host_packages.filebeat.status }})
      Metricbeat: {{ host_packages.metricbeat.installed }} ({{ host_packages.metricbeat.status }})
      
# Debug what we collected
- name: Debug service states collection
  debug:
    msg: |
      Host: {{ inventory_hostname }}
      Service States: {{ service_states | to_nice_json }}

# Create a fact with this host's package info
- name: Create fact for this host
  set_fact:
    host_pkg_fact: "{'host': inventory_hostname, 'packages': host_packages}"

# Register each host's info locally
- name: Register package fact on localhost
  set_fact:
    "host_pkg_{{ inventory_hostname | replace('.', '_') }}": "{{ host_pkg_fact }}"
  delegate_to: localhost

# Direct counting of services with status tracking
- name: Count Elasticsearch installations and service status
  set_fact:
    es_count: "{{ es_count | default(0) | int + 1 }}"
    es_active: "{{ es_active | default(0) | int + 1 if host_packages.elasticsearch.status == 'started' else es_active | default(0) | int }}"
    es_inactive: "{{ es_inactive | default(0) | int + 1 if host_packages.elasticsearch.status == 'stopped' else es_inactive | default(0) | int }}"
    es_failed: "{{ es_failed | default(0) | int + 1 if host_packages.elasticsearch.status == 'failed' else es_failed | default(0) | int }}"
  when: host_packages.elasticsearch.installed | bool
  
- name: Count Kibana installations and service status
  set_fact:
    kibana_count: "{{ kibana_count | default(0) | int + 1 }}"
    kibana_active: "{{ kibana_active | default(0) | int + 1 if host_packages.kibana.status == 'started' else kibana_active | default(0) | int }}"
    kibana_inactive: "{{ kibana_inactive | default(0) | int + 1 if host_packages.kibana.status == 'stopped' else kibana_inactive | default(0) | int }}"
    kibana_failed: "{{ kibana_failed | default(0) | int + 1 if host_packages.kibana.status == 'failed' else kibana_failed | default(0) | int }}"
  when: host_packages.kibana.installed | bool
  
- name: Count Filebeat installations and service status
  set_fact:
    filebeat_count: "{{ filebeat_count | default(0) | int + 1 }}"
    filebeat_active: "{{ filebeat_active | default(0) | int + 1 if host_packages.filebeat.status == 'started' else filebeat_active | default(0) | int }}"
    filebeat_inactive: "{{ filebeat_inactive | default(0) | int + 1 if host_packages.filebeat.status == 'stopped' else filebeat_inactive | default(0) | int }}"
    filebeat_failed: "{{ filebeat_failed | default(0) | int + 1 if host_packages.filebeat.status == 'failed' else filebeat_failed | default(0) | int }}"
  when: host_packages.filebeat.installed | bool
  
- name: Count Metricbeat installations and service status
  set_fact:
    metricbeat_count: "{{ metricbeat_count | default(0) | int + 1 }}"
    metricbeat_active: "{{ metricbeat_active | default(0) | int + 1 if host_packages.metricbeat.status == 'started' else metricbeat_active | default(0) | int }}"
    metricbeat_inactive: "{{ metricbeat_inactive | default(0) | int + 1 if host_packages.metricbeat.status == 'stopped' else metricbeat_inactive | default(0) | int }}"
    metricbeat_failed: "{{ metricbeat_failed | default(0) | int + 1 if host_packages.metricbeat.status == 'failed' else metricbeat_failed | default(0) | int }}"
  when: host_packages.metricbeat.installed | bool
  
# Create global ansible fact for each host's status
- name: Register with controller as a global fact
  set_fact:
    elasticsearch_installed_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.elasticsearch.installed }}"
    elasticsearch_status_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.elasticsearch.status }}"
    kibana_installed_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.kibana.installed }}"
    kibana_status_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.kibana.status }}"
    filebeat_installed_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.filebeat.installed }}"
    filebeat_status_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.filebeat.status }}"
    metricbeat_installed_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.metricbeat.installed }}"
    metricbeat_status_on_{{ inventory_hostname | replace('.', '_') | replace('-', '_') }}: "{{ host_packages.metricbeat.status }}"
  delegate_to: localhost

# Set total hosts
- name: Set total hosts count
  set_fact:
    total_hosts: "{{ groups['all'] | length }}"
  delegate_to: localhost
  run_once: true

# Aggregate counts from all hosts
- name: Aggregate all service counts
  set_fact:
    # Count Elasticsearch installations and statuses
    es_count_final: >-
      {% set es_count = 0 %}
      {% for host in groups['all'] %}
        {% set es_var = 'elasticsearch_installed_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][es_var] | default(false) %}
          {% set es_count = es_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ es_count }}
    
    es_active_final: >-
      {% set active_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'elasticsearch_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'started' %}
          {% set active_count = active_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ active_count }}

    es_inactive_final: >-
      {% set inactive_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'elasticsearch_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'stopped' %}
          {% set inactive_count = inactive_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ inactive_count }}

    es_failed_final: >-
      {% set failed_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'elasticsearch_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'failed' %}
          {% set failed_count = failed_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ failed_count }}
    
    # Count Kibana installations and statuses
    kibana_count_final: >-
      {% set kb_count = 0 %}
      {% for host in groups['all'] %}
        {% set kb_var = 'kibana_installed_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][kb_var] | default(false) %}
          {% set kb_count = kb_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ kb_count }}
      
    kibana_active_final: >-
      {% set active_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'kibana_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'started' %}
          {% set active_count = active_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ active_count }}

    kibana_inactive_final: >-
      {% set inactive_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'kibana_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'stopped' %}
          {% set inactive_count = inactive_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ inactive_count }}

    kibana_failed_final: >-
      {% set failed_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'kibana_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'failed' %}
          {% set failed_count = failed_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ failed_count }}
      
    # Count Filebeat installations and statuses
    filebeat_count_final: >-
      {% set fb_count = 0 %}
      {% for host in groups['all'] %}
        {% set fb_var = 'filebeat_installed_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][fb_var] | default(false) %}
          {% set fb_count = fb_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ fb_count }}
      
    filebeat_active_final: >-
      {% set active_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'filebeat_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'started' %}
          {% set active_count = active_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ active_count }}

    filebeat_inactive_final: >-
      {% set inactive_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'filebeat_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'stopped' %}
          {% set inactive_count = inactive_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ inactive_count }}

    filebeat_failed_final: >-
      {% set failed_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'filebeat_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'failed' %}
          {% set failed_count = failed_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ failed_count }}
      
    # Count Metricbeat installations and statuses
    metricbeat_count_final: >-
      {% set mb_count = 0 %}
      {% for host in groups['all'] %}
        {% set mb_var = 'metricbeat_installed_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][mb_var] | default(false) %}
          {% set mb_count = mb_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ mb_count }}
      
    metricbeat_active_final: >-
      {% set active_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'metricbeat_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'started' %}
          {% set active_count = active_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ active_count }}

    metricbeat_inactive_final: >-
      {% set inactive_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'metricbeat_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'stopped' %}
          {% set inactive_count = inactive_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ inactive_count }}

    metricbeat_failed_final: >-
      {% set failed_count = 0 %}
      {% for host in groups['all'] %}
        {% set status_var = 'metricbeat_status_on_' + host | replace('.', '_') | replace('-', '_') %}
        {% if hostvars['localhost'][status_var] | default('') == 'failed' %}
          {% set failed_count = failed_count + 1 %}
        {% endif %}
      {% endfor %}
      {{ failed_count }}
  delegate_to: localhost
  run_once: true

# Debug the counts
- name: Debug final package counts
  debug:
    msg: |
      FINAL PACKAGE COUNTS:
      Elasticsearch: {{ es_count_final }} (Active: {{ es_active_final }}, Inactive: {{ es_inactive_final }}, Failed: {{ es_failed_final }})
      Kibana: {{ kibana_count_final }} (Active: {{ kibana_active_final }}, Inactive: {{ kibana_inactive_final }}, Failed: {{ kibana_failed_final }})
      Filebeat: {{ filebeat_count_final }} (Active: {{ filebeat_active_final }}, Inactive: {{ filebeat_inactive_final }}, Failed: {{ filebeat_failed_final }})
      Metricbeat: {{ metricbeat_count_final }} (Active: {{ metricbeat_active_final }}, Inactive: {{ metricbeat_inactive_final }}, Failed: {{ metricbeat_failed_final }})
  delegate_to: localhost
  run_once: true

# Update cluster summary with service counts
- name: Update cluster summary with service counts
  set_fact:
    cluster_summary: "{{ cluster_summary | combine({
      'services': {
        'elasticsearch': {
          'total': es_count_final | int,
          'active': es_active_final | int,
          'inactive': es_inactive_final | int,
          'failed': es_failed_final | int,
          'not_installed': total_hosts | int - es_count_final | int
        },
        'kibana': {
          'total': kibana_count_final | int,
          'active': kibana_active_final | int,
          'inactive': kibana_inactive_final | int,
          'failed': kibana_failed_final | int,
          'not_installed': total_hosts | int - kibana_count_final | int
        },
        'filebeat': {
          'total': filebeat_count_final | int,
          'active': filebeat_active_final | int,
          'inactive': filebeat_inactive_final | int,
          'failed': filebeat_failed_final | int,
          'not_installed': total_hosts | int - filebeat_count_final | int
        },
        'metricbeat': {
          'total': metricbeat_count_final | int,
          'active': metricbeat_active_final | int,
          'inactive': metricbeat_inactive_final | int,
          'failed': metricbeat_failed_final | int,
          'not_installed': total_hosts | int - metricbeat_count_final | int
        }
      }
    }, recursive=True) }}"
  delegate_to: localhost
  run_once: true

# Elasticsearch health check (runs direct API call)
- name: Check Elasticsearch cluster health
  block:
    # Try to get elastic password from a running hot node if available
    - name: Check for running Elasticsearch nodes
      set_fact:
        running_es_nodes: "{% set nodes = [] %}{% for host in groups['all'] %}{% set status_var = 'elasticsearch_status_on_' + host | replace('.', '_') | replace('-', '_') %}{% if hostvars['localhost'][status_var] | default('') == 'started' %}{% set nodes = nodes + [host] %}{% endif %}{% endfor %}{{ nodes }}"
      
    - name: Identify a running ES node for health check
      set_fact:
        es_api_host: "{{ running_es_nodes[0] }}"
      when: running_es_nodes | length > 0
      
    - name: Load elastic password if available
      set_fact:
        elastic_password: "{{ lookup('file', deployment_dir + '/elastic_password.txt') | trim }}"
      no_log: true
      when: artifact_check.results[1].stat.exists
      
    - name: Get cluster health from running node
      uri:
        url: "https://{{ hostvars[es_api_host].ansible_host }}:9200/_cluster/health"
        method: GET
        user: elastic
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        validate_certs: no
        return_content: yes
      register: es_health
      when: es_api_host is defined and elastic_password is defined
      ignore_errors: yes

    # Fallback to try first hot node if available
    - name: Try first hot node as fallback (if available)
      uri:
        url: "https://{{ hostvars[groups['hot_nodes'][0]].ansible_host }}:9200/_cluster/health"
        method: GET
        user: elastic
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        validate_certs: no
        return_content: yes
      register: es_health_fallback
      when: 
        - es_health is not defined or es_health is failed
        - groups['hot_nodes'] | length > 0
        - elastic_password is defined
      ignore_errors: yes

    - name: Store Elasticsearch health
      set_fact:
        cluster_summary: "{{ cluster_summary | combine({
          'elasticsearch': {
            'health': (es_health.json.status | default((es_health_fallback.json.status if es_health_fallback is success else 'unknown'))),
            'nodes': (es_health.json.number_of_nodes | default((es_health_fallback.json.number_of_nodes if es_health_fallback is success else 0))),
            'data_nodes': (es_health.json.number_of_data_nodes | default((es_health_fallback.json.number_of_data_nodes if es_health_fallback is success else 0))),
            'active_shards': (es_health.json.active_shards | default((es_health_fallback.json.active_shards if es_health_fallback is success else 0))),
            'relocating_shards': (es_health.json.relocating_shards | default((es_health_fallback.json.relocating_shards if es_health_fallback is success else 0))),
            'initializing_shards': (es_health.json.initializing_shards | default((es_health_fallback.json.initializing_shards if es_health_fallback is success else 0))),
            'unassigned_shards': (es_health.json.unassigned_shards | default((es_health_fallback.json.unassigned_shards if es_health_fallback is success else 0)))
          }
        }, recursive=True) }}"
      when: (es_health is defined and es_health is success) or (es_health_fallback is defined and es_health_fallback is success)
  delegate_to: localhost
  run_once: true
  ignore_errors: yes

# Generate summary report (on localhost)
- name: Create summary report
  copy:
    dest: "/tmp/cluster_summary_report.txt"
    content: |
      CLUSTER SUMMARY REPORT
      =====================
      Generated: {{ cluster_summary.timestamp }}

      DEPLOYMENT INFORMATION
      --------------------
      Installation Method: {{ cluster_summary.deployment.installation_method }}
      Cluster Name: {{ cluster_summary.deployment.cluster_name }}
      Data Path: {{ cluster_summary.deployment.data_path }}
      Log Path: {{ cluster_summary.deployment.log_path }}

      TOPOLOGY
      --------
      Total Hosts: {{ cluster_summary.topology.total_hosts }}
      Master Nodes: {{ cluster_summary.topology.master_nodes }}
      Hot Nodes: {{ cluster_summary.topology.hot_nodes }}
      Frozen Nodes: {{ cluster_summary.topology.frozen_nodes }}
      Kibana Nodes: {{ cluster_summary.topology.kibana }}
      Monitoring Instances: {{ cluster_summary.topology.monitoring_instance }}
      Helper Instances: {{ cluster_summary.topology.helper_instance }}

      SERVICE STATUS
      -------------
      {% for service, status in cluster_summary.services.items() %}
      {{ service | title }}:
        Total Installations: {{ status.total }}
        Active: {{ status.active }}
        Inactive: {{ status.inactive }}
        Failed: {{ status.failed }}
        Not Installed: {{ status.not_installed }}

      {% endfor %}

      {% if cluster_summary.elasticsearch is defined %}
      ELASTICSEARCH CLUSTER HEALTH
      --------------------------
      Status: {{ cluster_summary.elasticsearch.health }}
      Nodes: {{ cluster_summary.elasticsearch.nodes }}
      Data Nodes: {{ cluster_summary.elasticsearch.data_nodes }}
      Active Shards: {{ cluster_summary.elasticsearch.active_shards }}
      Relocating Shards: {{ cluster_summary.elasticsearch.relocating_shards }}
      Initializing Shards: {{ cluster_summary.elasticsearch.initializing_shards }}
      Unassigned Shards: {{ cluster_summary.elasticsearch.unassigned_shards }}

      {% endif %}
  delegate_to: localhost
  run_once: true

- name: Display summary report
  debug:
    msg: "{{ lookup('file', '/tmp/cluster_summary_report.txt') | split('\n') }}"
  delegate_to: localhost
  run_once: true

- name: Cleanup temporary files
  file:
    path: "/tmp/cluster_summary_report.txt"
    state: absent
  delegate_to: localhost
  run_once: true
  ignore_errors: yes