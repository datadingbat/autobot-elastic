# This is a template for implementing tracking/logging functionality
# Operations to track include add, remove, update, and state change of components

# Update tracking files
- name: Update operations tracking
  block:
    # Create ~/.elasticsearch directory if it doesn't exist
    - name: Ensure ~/.elasticsearch directory exists
      file:
        path: "{{ lookup('env', 'HOME') }}/.elasticsearch"
        state: directory
        mode: '0700'
      delegate_to: localhost
      run_once: true

    # Create ~/.elasticsearch/backups directory if it doesn't exist
    - name: Ensure backups directory exists
      file:
        path: "{{ lookup('env', 'HOME') }}/.elasticsearch/backups"
        state: directory
        mode: '0700'
      delegate_to: localhost
      run_once: true

    # Check for operations_log file
    - name: Check if operations_log file exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.elasticsearch/operations_log.yml"
      register: operations_log_file
      delegate_to: localhost
      run_once: true

    # Initialize operations_log file if it doesn't exist
    - name: Initialize operations_log file if it doesn't exist
      copy:
        content: |
          ---
          # Elasticsearch operations log
          # Created: {{ ansible_date_time.iso8601 }}
          
          operations: []
        dest: "{{ lookup('env', 'HOME') }}/.elasticsearch/operations_log.yml"
        mode: '0600'
      when: not operations_log_file.stat.exists
      delegate_to: localhost
      run_once: true

    # Backup operations_log file if it exists
    - name: Backup operations_log file if it exists
      shell: |
        mkdir -p {{ lookup('env', 'HOME') }}/.elasticsearch/backups
        cp {{ lookup('env', 'HOME') }}/.elasticsearch/operations_log.yml {{ lookup('env', 'HOME') }}/.elasticsearch/backups/operations_log.yml.$(date +%Y%m%d%H%M%S)
      when: operations_log_file.stat.exists
      delegate_to: localhost
      run_once: true

    # Process operation results - create list of hosts where operation was actually performed
    - name: Get operation status for each host
      set_fact:
        component_modified: "{{ component_modified | default(false) }}"
        
    - name: Create status file for each host
      copy:
        dest: "/tmp/{{ operation_type }}_status_{{ inventory_hostname }}.txt"
        content: "{{ 'modified' if component_modified | default(false) else 'skipped' }}"
      delegate_to: localhost
        
    - name: Find all status files for modified hosts
      find:
        paths: /tmp
        patterns: "{{ operation_type }}_status_*.txt"
        contains: "modified"
      register: modified_status_files
      delegate_to: localhost
      run_once: true
      
    - name: Extract hostnames from modified status files
      set_fact:
        successful_hosts: "{{ modified_status_files.files | map(attribute='path') | 
                           map('regex_replace', '^/tmp/{{ operation_type }}_status_(.+)\\.txt$', '\\1') | list }}"
      delegate_to: localhost
      run_once: true
      
    - name: Cleanup status files
      file:
        path: "/tmp/{{ operation_type }}_status_{{ item }}.txt"
        state: absent
      loop: "{{ ansible_play_hosts }}"
      delegate_to: localhost
      run_once: true

    - name: Debug successful hosts
      debug:
        msg: "Successfully {{ operation_verb }} {{ component_name }} on: {{ successful_hosts | join(', ') }}"
      delegate_to: localhost
      run_once: true
      when: successful_hosts | length > 0
      
    # Create individual operation log file
    - name: Generate timestamp
      command: date +%Y%m%d%H%M%S
      register: timestamp_raw
      delegate_to: localhost
      run_once: true
      changed_when: false
      
    - name: Create operation log file
      copy:
        content: |
          ---
          # {{ component_name | title }} Operation Record
          # Created: {{ ansible_date_time.iso8601 }}
          
          Operation: {{ operation_type }}
          Timestamp: {{ ansible_date_time.iso8601 }}
          Hosts: {{ successful_hosts | join(', ') }}
          {% if successful_hosts | length == 0 %}
          Status: No changes made (all hosts were skipped)
          {% else %}
          Status: Successfully {{ operation_verb }} {{ successful_hosts | length }} host(s)
          {% endif %}
          
          Configuration:
          {% for key, value in operation_details.items() %}
            {{ key }}: {{ value }}
          {% endfor %}
        dest: "{{ lookup('env', 'HOME') }}/.elasticsearch/operation_{{ component_name }}_{{ timestamp_raw.stdout }}.log"
        mode: '0600'
      delegate_to: localhost
      run_once: true
      
    # Update main operations log file
    - name: Load existing operations log
      include_vars:
        file: "{{ lookup('env', 'HOME') }}/.elasticsearch/operations_log.yml"
        name: current_operations
      delegate_to: localhost
      run_once: true
      when: operations_log_file.stat.exists

    - name: Create empty operations list if file doesn't exist
      set_fact:
        current_operations:
          operations: []
      delegate_to: localhost
      run_once: true
      when: not operations_log_file.stat.exists
        
    - name: Append new operation to log
      copy:
        content: |
          ---
          # Elasticsearch operations log
          # Updated: {{ ansible_date_time.iso8601 }}
          
          operations:
          {% for op in current_operations.operations %}
            - {{ op | to_json }}
          {% endfor %}
            - 
              operation: {{ operation_type }}
              component: {{ component_name }}
              timestamp: "{{ ansible_date_time.iso8601 }}"
              hosts: "{{ successful_hosts | join(', ') }}"
              status: "{% if successful_hosts | length == 0 %}No changes made{% else %}{{ operation_verb | title }} {{ successful_hosts | length }} host(s){% endif %}"
              configuration:
                {% for key, value in operation_details.items() %}
                {{ key }}: "{{ value }}"
                {% endfor %}
        dest: "{{ lookup('env', 'HOME') }}/.elasticsearch/operations_log.yml"
        mode: '0600'
      delegate_to: localhost
      run_once: true
      
    # Update cluster topology if needed (for component additions or removals)
    - name: Check if topology update is needed
      set_fact:
        update_topology: "{{ topology_update_needed | default(false) }}"
      delegate_to: localhost
      run_once: true
      
    - name: Update cluster topology
      block:
        - name: Check if topology file exists
          stat:
            path: "{{ lookup('env', 'HOME') }}/.elasticsearch/cluster_topology.yml"
          register: topology_file
          delegate_to: localhost
          run_once: true
          
        - name: Backup existing topology file if it exists
          shell: "cp {{ lookup('env', 'HOME') }}/.elasticsearch/cluster_topology.yml {{ lookup('env', 'HOME') }}/.elasticsearch/backups/cluster_topology.yml.$(date +%Y%m%d%H%M%S)"
          when: topology_file.stat.exists
          delegate_to: localhost
          run_once: true
          
        - name: Load current topology if exists
          include_vars:
            file: "{{ lookup('env', 'HOME') }}/.elasticsearch/cluster_topology.yml"
            name: current_topology
          when: topology_file.stat.exists
          delegate_to: localhost
          run_once: true
          
        - name: Generate cluster topology file
          copy:
            content: |
              ---
              # Elasticsearch cluster topology snapshot
              # Last updated: {{ ansible_date_time.iso8601 }}
              # This file combines information from original deployment and operational changes
              
              cluster_name: {{ cluster_name | default('elastic-cluster') }}
              
              node_counts:
                {% for group_name, hosts in component_groups.items() %}
                {{ group_name }}: {{ hosts | length }}
                {% endfor %}
                total: {{ component_groups.values() | map('length') | sum }}
              
              nodes:
                {% for group_name, hosts in component_groups.items() %}
                {{ group_name }}:
                {% for host in hosts %}
                  - host: {{ host }}
                    ip: {{ hostvars[host].ansible_host | default(host) }}
                {% endfor %}
                {% endfor %}
            dest: "{{ lookup('env', 'HOME') }}/.elasticsearch/cluster_topology.yml"
            mode: '0600'
          delegate_to: localhost
          run_once: true
          when: topology_file.stat.exists == false
      when: update_topology 
      delegate_to: localhost
      run_once: true
  delegate_to: localhost
  run_once: true