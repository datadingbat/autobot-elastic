#!/bin/bash

# =============================================================================
# This script generates an Ansible inventory file from an AWS EC2 stack.
# It queries EC2 instances with the tag 'project=jessem-paypal' and categorizes
# them into master_nodes, hot_nodes, frozen_nodes, and helper_instance groups.
# Intended to be run after creating an Elastic stack in AWS EC2.
# =============================================================================

# Exit on error
set -e

# Script name for error messages
SCRIPT_NAME=$(basename "$0")

# Temp directory for intermediate files
TEMP_DIR="/tmp/ansible_inventory_$$"

# Function for error handling
error_exit() {
    echo "ERROR: $1" >&2
    rm -rf "$TEMP_DIR" 2>/dev/null || true
    exit 1
}

# Function to check AWS CLI availability
check_aws_cli() {
    if ! command -v aws >/dev/null 2>&1; then
        error_exit "AWS CLI is not installed. Please install it first."
    fi
}

# Function to check AWS credentials
check_aws_credentials() {
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        error_exit "AWS credentials not configured or invalid."
    fi
}

# Create temporary directory
create_temp_dir() {
    mkdir -p "$TEMP_DIR" || error_exit "Failed to create temporary directory"
}

# Main function to fetch and process EC2 instances
fetch_instances() {
    aws ec2 describe-instances \
        --filters "Name=tag:project,Values=jessem-paypal" \
        --query 'Reservations[].Instances[].[
            Tags[?Key==`Name`].Value|[0],
            PrivateIpAddress
        ] | [?[1] != `null`]' \
        --output text 2>/dev/null | sort || error_exit "Failed to fetch EC2 instances"
}

# Process instances and create node files
process_instances() {
    while read -r name ip; do
        # Skip empty lines
        if [[ -z "$name" || -z "$ip" ]]; then
            continue
        fi
        
        case "$name" in
            *"master"*)
                echo "${name%.*} ansible_host=${name}" >> "$TEMP_DIR/master_nodes.txt"
                ;;
            *"hot"*)
                echo "${name%.*} ansible_host=${name}" >> "$TEMP_DIR/hot_nodes.txt"
                ;;
            *"frozen"*)
                echo "${name%.*} ansible_host=${name}" >> "$TEMP_DIR/frozen_nodes.txt"
                ;;
            *"helper"*)
                echo "${name%.*} ansible_host=${name}" >> "$TEMP_DIR/helper_nodes.txt"
                ;;
            *)
                # Only show warning if name isn't empty
                [[ -n "$name" ]] && echo "Warning: Unknown node type for $name" >&2
                ;;
        esac
    done
}

# Generate inventory file
generate_inventory() {
    local inventory_file="inventory.ini"
    echo "Generating $inventory_file..."
    
    {
        echo "# Generated by $SCRIPT_NAME on $(date)"
        echo "# Project: jessem-paypal"
        echo
        
        echo "[master_nodes]"
        [[ -f "$TEMP_DIR/master_nodes.txt" ]] && cat "$TEMP_DIR/master_nodes.txt"
        
        echo -e "\n[hot_nodes]"
        [[ -f "$TEMP_DIR/hot_nodes.txt" ]] && cat "$TEMP_DIR/hot_nodes.txt"
        
        echo -e "\n[frozen_nodes]"
        [[ -f "$TEMP_DIR/frozen_nodes.txt" ]] && cat "$TEMP_DIR/frozen_nodes.txt"
        
        echo -e "\n[helper_instance]"
        [[ -f "$TEMP_DIR/helper_nodes.txt" ]] && cat "$TEMP_DIR/helper_nodes.txt"
        
        echo -e "\n[kibana]"
        [[ -f "$TEMP_DIR/helper_nodes.txt" ]] && head -n 1 "$TEMP_DIR/helper_nodes.txt"
        
        echo -e "\n[all:vars]"
        echo "ansible_user=ubuntu"
        echo "ansible_connection=ssh"
        echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
        echo "ansible_ssh_private_key_file=/home/ubuntu/.ssh/your-key.pem"
    } > "$inventory_file"
}

# Cleanup function
cleanup() {
    echo "Cleaning up temporary files..."
    rm -rf "$TEMP_DIR"
}

# Main execution
main() {
    check_aws_cli
    check_aws_credentials
    create_temp_dir
    
    echo "Fetching EC2 instances..."
    fetch_instances | process_instances
    
    if [[ ! -f "$TEMP_DIR/master_nodes.txt" && ! -f "$TEMP_DIR/hot_nodes.txt" ]]; then
        error_exit "No instances found matching the specified filters"
    fi
    
    generate_inventory
    cleanup
    
    echo "Inventory file generated successfully at inventory.ini"
}

# Trap for cleanup on script exit
trap cleanup EXIT

# Run main function
main "$@"
