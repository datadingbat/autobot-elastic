---
- name: Clean up Elasticsearch installation
  hosts: all
  become: true 
  vars:
    elastic_password_file: "{{ lookup('env', 'HOME') }}/.elasticsearch/elastic_password.txt"
    elastic_password: "{{ lookup('file', elastic_password_file) }}"
    kibana_host: "{{ hostvars[groups['kibana'][0]]['ansible_host'] }}"
    hot_nodes: "{{ groups['hot_nodes'] | map('extract', hostvars, ['ansible_host']) | map('regex_replace', '^(.*)$', '\\1:9200') | list }}"
    first_master: "{{ groups['master_nodes'][0] }}"
    cert_files:
      - elastic-http.p12
      - elastic-certificates.p12

  tasks:
    - name: Install Elasticsearch
      apt:
        name: elasticsearch=8.15.4
        state: present
        allow_unauthenticated: no
        update_cache: yes
      environment:
        DEBIAN_FRONTEND: noninteractive

    # - name: Copy Elasticsearch deb package from Ansible control node
    #   copy:
    #     src: /path/to/elasticsearch-8.15.4-amd64.deb
    #     dest: /tmp/elasticsearch-8.15.4-amd64.deb
    #     mode: '0644'

    # - name: Install Elasticsearch from local .deb package
    #   apt:
    #     deb: /tmp/elasticsearch-8.15.4-amd64.deb
    #     state: present
    #     allow_unauthenticated: no
    #   become_method: sudo
    #   environment:
    #     DEBIAN_FRONTEND: noninteractive

    - name: Wait for package installation to settle
      wait_for:
        timeout: 10

    - name: Set certificate password fact
      set_fact:
        es_cert_pass: "elastic2024"

    - name: Set s3 secret key fact
      set_fact:
        s3_client_secret_key: "sample_secret_key"

    - name: Set s3 access key fact
      set_fact:
        s3_client_access_key: "sample_access_key"

    - name: Create certs directory
      file:
        path: /etc/elasticsearch/certs
        state: directory
        owner: root
        group: elasticsearch
        mode: '0750'

    - name: Fetch certificates from first master node
      ansible.builtin.fetch:
        src: "/etc/elasticsearch/certs/{{ item }}"
        dest: "/tmp/elastic-certs/{{ item }}"
        flat: yes
      with_items: "{{ cert_files }}"
      run_once: true
      delegate_to: "{{ first_master }}"

    - name: Copy certificates to elasticsearch/certs
      copy:
        src: "/tmp/elastic-certs/{{ item }}"
        dest: "/etc/elasticsearch/certs/{{ item }}"
        mode: '0644'
        owner: root
        group: elasticsearch
      with_items: "{{ cert_files }}"

    - name: Update transport SSL passwords in keystore
      shell: |
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.transport.ssl.keystore.secure_password
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.transport.ssl.truststore.secure_password    
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.http.ssl.keystore.secure_password
        echo "{{ es_cert_pass }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f xpack.security.http.ssl.truststore.secure_password
        echo "{{ s3_client_secret_key }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f s3.client.default.secret_key
        echo "{{ s3_client_access_key }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -f s3.client.default.access_key

    - name: Create initial elasticsearch settings
      copy:
        dest: /etc/elasticsearch/elasticsearch.yml
        content: |
          # Elasticsearch configuration
          path.data: /var/lib/elasticsearch
          path.logs: /var/log/elasticsearch

          # Prevent heap memory from being swapped out
          bootstrap.memory_lock: true
          
          # We will need to set this once we do some benchmarks. For now keep it commented out
          #indices.recovery.max_bytes_per_sec
          
          # Cluster name
          cluster.name: elastic-cluster

          # Node configuration
          node.name: {{ hostvars[inventory_hostname]['ansible_host'] }}
          network.host: {{ ansible_host }}  

          # Node roles
          {% if inventory_hostname in groups['master_nodes'] %}
          node.roles: [master]
          {% elif inventory_hostname in groups['hot_nodes'] %}
          node.roles: [data_hot, ingest, remote_cluster_client, ml, data_content, transform]
          {% elif inventory_hostname in groups['frozen_nodes'] %}
          node.roles: [data_frozen, remote_cluster_client]
          {% endif %}

          # Discovery configuration
          discovery.seed_hosts:
          {% for host in groups['master_nodes'] %}
            - {{ hostvars[host]['ansible_host'] }}:9300
          {% endfor %}

          # Initial master nodes (only for bootstrap)
          {% if inventory_hostname in groups['master_nodes'] %}
          cluster.initial_master_nodes:
          {% for host in groups['master_nodes'] %}
            - {{ hostvars[host]['ansible_host'] }}
          {% endfor %}
          {% endif %}
          
          # Security settings
          xpack.security.enabled: true
          xpack.security.enrollment.enabled: true

          # HTTP SSL Configuration
          xpack.security.http.ssl:
            enabled: true
            keystore.path: /etc/elasticsearch/certs/elastic-http.p12
            truststore.path: /etc/elasticsearch/certs/elastic-http.p12
            verification_mode: certificate 
            client_authentication: optional
            
          # Transport SSL Configuration
          xpack.security.transport.ssl:
            enabled: true
            verification_mode: certificate
            keystore.path: /etc/elasticsearch/certs/elastic-certificates.p12
            truststore.path: /etc/elasticsearch/certs/elastic-certificates.p12
            client_authentication: optional

          # Network settings
          transport.host: 0.0.0.0
          transport.port: 9300
          http.port: 9200
        owner: elasticsearch
        group: elasticsearch
        mode: '0660'

    - name: Start Elasticsearch on data nodes
      systemd:
        name: elasticsearch
        state: started
        enabled: yes
        daemon_reload: yes
